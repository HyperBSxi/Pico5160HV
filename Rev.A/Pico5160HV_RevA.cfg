# ==============================================================
# Sample configuration for Pico5160HV Rev.A
# ==============================================================
# Please place this file in the same folder as printer.cfg.
# Add the following line to the end of printer.cfg:
# [include Pico5160HV.cfg]

[mcu pico5160hv]
serial:
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ.
#   This parameter must be provided when using a serial port.
#canbus_uuid:
#   If using a device connected to a CAN bus then this sets the unique
#   chip identifier to connect to. This value must be provided when using
#   CAN bus for communication.


# Motor outputs on the Pico5160HV are arranged from right to left as Drive1, Drive2, etc.,
# when the Pico5160HV logo is facing upright and visible.

# Drv1
[stepper_x]
step_pin: pico5160hv:gpio5
dir_pin: pico5160hv:gpio4
enable_pin: !pico5160hv:gpio16
microsteps: 32
rotation_distance: 40
endstop_pin: pico5160hv:gpio20
# endstop_pin: tmc5160_stepper_x:virtual_endstop
position_endstop: 0
position_max: 1000

# Drv2
[stepper_y]
step_pin: pico5160hv:gpio8
dir_pin: pico5160hv:gpio7
enable_pin: !pico5160hv:gpio17
microsteps: 32
rotation_distance: 40
endstop_pin: pico5160hv:gpio21
# endstop_pin: tmc5160_stepper_y:virtual_endstop
position_endstop: 0
position_max: 1000


# Drv3
[stepper_z]
step_pin: pico5160hv:gpio11
dir_pin: pico5160hv:gpio10
enable_pin: !pico5160hv:gpio18
microsteps: 32
rotation_distance: 8
endstop_pin: pico5160hv:gpio22
# endstop_pin: tmc5160_stepper_z:virtual_endstop
position_endstop: 0.5
position_max: 1000

# Drv4
[stepper_z2]
# step_pin: pico5160hv:gpio14
# dir_pin: pico5160hv:gpio13
# enable_pin: !pico5160hv:gpio19
# microsteps: 32
# rotation_distance: 40
# endstop_pin: pico5160hv:gpio23
# endstop_pin: tmc5160_stepper_z2:virtual_endstop
# position_endstop: 0
# position_max: 1000


[tmc5160 stepper_x]
cs_pin: pico5160hv:gpio6
spi_bus: spi0_gpio0_gpio3_gpio2
sense_resistor: 0.100
# Please customize the following settings to match your environment.
# diag1_pin: !pico5160hv:gpio20
run_current: 0.600 # Up to 2.3A possible, but limited due to heating
stealthchop_threshold: 999999

[tmc5160 stepper_y]
cs_pin: pico5160hv:gpio9
spi_bus: spi0_gpio0_gpio3_gpio2
sense_resistor: 0.100
# diag1_pin: !pico5160hv:gpio21
run_current: 0.600
stealthchop_threshold: 999999

[tmc5160 stepper_z]
cs_pin: pico5160hv:gpio12
spi_bus: spi0_gpio0_gpio3_gpio2
sense_resistor: 0.100
#diag1_pin: !pico5160hv:gpio22
run_current: 0.600
stealthchop_threshold: 999999

[tmc5160 stepper_z2]
cs_pin: pico5160hv:gpio15
spi_bus: spi0_gpio0_gpio3_gpio2
sense_resistor: 0.100
#diag1_pin: !pico5160hv:gpio23
run_current: 0.600
hold_current: 0.050
stealthchop_threshold: 999999


[fan_generic picofan]
pin: pico5160hv:gpio24


[output_pin motor_on]
# This pin is controlled automatically at startup.
# See the [delayed_gcode AUTO_MOTOR_ON] section for more details.
pin: pico5160hv:gpio1


[output_pin can_on]
# CAN function can be disabled to save power.
pin: pico5160hv:gpio28


[adc_temperature MCP9700]
temperature1: 0.0
voltage1: 0.5
temperature2: 100.0
voltage2: 1.5

[temperature_sensor DRV1_TEMP]
# The temperature sensor is placed near the FETs on DRV1,
# but it does not accurately represent the actual FET temperature.
# It typically reads about 20°C lower than the FET temperature.
# Ensure sufficient active cooling to keep the FETs below 100°C.
sensor_type: MCP9700
sensor_pin: pico5160hv:gpio29
adc_voltage: 3.3
min_temp: -40.0
max_temp: 125.0


[delayed_gcode AUTO_MOTOR_ON]
# This setting automatically turns on motor power at startup.
# It is required to handle the inrush current caused by large capacitors.
# When OFF, the capacitors charge slowly through a 100Ω resistor.
# The capacitors charge in approximately 0.5 seconds,
# so this delay ensures power is turned on after charging is complete.
# If left OFF, the TMC5160 ENABLE is forcibly turned off and the motors will not operate.
gcode: SET_PIN PIN=motor_on VALUE=1.00
initial_duration: 1.0
